[
	{
		"id": 1,
		"term": "map",
		"definition": "The map() method creates a new array with the results of calling a provided function on every element in the calling array.",
		"snippets": [
			{
				"tags": [],
				"code": ["const arr = [1,2,3,4,5]", "const doubled = arr.map(num => num * 2); // [2, 4, 6, 8, 10]"]
			},
			{
				"tags": [],
				"code": ["var cars = [", "  { model: 'Buick', price: 'CHEAP' },", "  { model: 'Camaro', price: 'expensive' },", 
						" ]", " ", "const prices = cars.map(car => car.price);", "console.log(prices); // ['CHEAP', 'expensive']"]	
			}
		]

	},
	{
		"id": 2,
		"term": "filter",
		"definition": "The filter() method creates a new array with all elements that pass the test implemented by the provided function.",
		"snippets": [
			{
				"tags": [],
				"code": ["var products = [", 
					"  { name: 'cucumber', type: 'vegetable', quantity: 12, price: 1 },", 
					"  { name: 'banana', type: 'fruit', quantity: 10, price: 5 },", 
					"  { name: 'celery', type: 'vegetable', quantity: 7, price: 9 },", 
					"  { name: 'orange', type: 'fruit', quantity: 20, price: 14 },", 
					"  { name: 'hamburger', type: 'meat', quantity: 5, price: 25 }", 
					"];", 
					"", 
					"var filtered = products.filter(prod => prod.type == 'fruit' && prod.quantity > 10);",
					"",
					" // [{name: 'orange', type: 'fruit', quantity: 20, price: 14}]"]
			}
		]
	},
	{
		"id": 3,
		"term": "reduce",
		"definition": "The reduce() method applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.",
		"snippets": [
			{
				"tags": [],
				"code": ["var numbers = [10,20,30];", "// ES6", 
					"var total = numbers.reduce((acc, num) => acc + num);", 
					"// ES5", 
					"var total2 = numbers.reduce(function(acc, sum) {", 
					"  return sum + acc;", 
					"},0);","// both return 60"]
			},
			{
				"tags": [],
				"code": ["var primaryColors = [", 
					"  { color: 'red' },", 
					"  { color: 'yellow' },", 
					"  { color: 'blue' }", 
					"];", 
					"", 
					"var colors = primaryColors.reduce(function(previous, color) {", 
					"  previous.push(color.color);", 
					"  return previous;", 
					"}, [])", 
					"// ['red', 'yellow', 'blue']"
				]
			}
		]
	},
	{
		"id": 4,
		"term": "indexOf",
		"definition": "The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.",
		"snippets": [
			{
				"tags": [],
				"code": [
					"var beasts = ['ant', 'bison', 'camel', 'duck', 'bison'];", 
					"", 
					"console.log(beasts.indexOf('bison'));", 
					"// expected output: 1", 
					"", 
					"// start from index 2", 
					"console.log(beasts.indexOf('bison', 2));", 
					"// expected output: 4", 
					"", 
					"console.log(beasts.indexOf('giraffe'));", 
					"// expected output: -1"
				]
			}
		]
	},
	{
		"id": 5,
		"term": "substr",
		"definition": "The substr() method extracts parts of a string, beginning at the character at the specified position, and returns the specified number of characters.",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 6,
		"term": "forEach",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 7,
		"term": "sort",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 8,
		"term": "reverse",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 9,
		"term": "join",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 10,
		"term": "shift",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 11,
		"term": "unshift",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 12,
		"term": "slice",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 13,
		"term": "splice",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 31415926535897932384626433832795028841971693,
		"term": "Cool Code",
		"definition": "Just random bits of code that I like.",
		"snippets": [
			{
				"tags": ["random color generator"],
				"code": ["function randomColor() {  ", "    var rand = '#' + Math.random().toString(16).slice(2,8);", " return rand", "}"]
			}
		]
	},
	{
		"id": 14,
		"term": "Detecting Properties on Objects",
		"definition": "",
		"snippets": [
			{
				"tags": ["hasOwnProperty"],
				"code": []
			}

		]
	},
	{
		"id": 15,
		"term": "Immediately Invoked Function Expressions (IIFEs)",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 16,
		"term": "Recursion",
		"definition": "Examples of recursive functions.",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 9999999999999,
		"term": "Template",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 9999999999999,
		"term": "Template",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 9999999999999,
		"term": "Template",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 9999999999999,
		"term": "Template",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 9999999999999,
		"term": "Template",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 9999999999999,
		"term": "Template",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 9999999999999,
		"term": "Template",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 9999999999999,
		"term": "Template",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 9999999999999,
		"term": "Template",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 9999999999999,
		"term": "Template",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 9999999999999,
		"term": "Template",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 9999999999999,
		"term": "Template",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 9999999999999,
		"term": "Template",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 9999999999999,
		"term": "Template",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	},
	{
		"id": 9999999999999,
		"term": "Template",
		"definition": "",
		"snippets": [
			{
				"tags": [],
				"code": []
			}
		]
	}
	

]